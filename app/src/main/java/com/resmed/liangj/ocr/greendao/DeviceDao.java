package com.resmed.liangj.ocr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.resmed.liangj.ocr.bean.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MachineCode = new Property(1, String.class, "machineCode", false, "MACHINE_CODE");
        public final static Property BoxCode = new Property(2, String.class, "boxCode", false, "BOX_CODE");
        public final static Property SimCode = new Property(3, String.class, "simCode", false, "SIM_CODE");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property FormateTime = new Property(5, String.class, "formateTime", false, "FORMATE_TIME");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MACHINE_CODE\" TEXT NOT NULL ," + // 1: machineCode
                "\"BOX_CODE\" TEXT," + // 2: boxCode
                "\"SIM_CODE\" TEXT," + // 3: simCode
                "\"DATE\" INTEGER," + // 4: date
                "\"FORMATE_TIME\" TEXT);"); // 5: formateTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEVICE_MACHINE_CODE_DATE_DESC ON \"DEVICE\"" +
                " (\"MACHINE_CODE\" ASC,\"DATE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMachineCode());
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(3, boxCode);
        }
 
        String simCode = entity.getSimCode();
        if (simCode != null) {
            stmt.bindString(4, simCode);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String formateTime = entity.getFormateTime();
        if (formateTime != null) {
            stmt.bindString(6, formateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMachineCode());
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(3, boxCode);
        }
 
        String simCode = entity.getSimCode();
        if (simCode != null) {
            stmt.bindString(4, simCode);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String formateTime = entity.getFormateTime();
        if (formateTime != null) {
            stmt.bindString(6, formateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // machineCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // boxCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // simCode
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // formateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMachineCode(cursor.getString(offset + 1));
        entity.setBoxCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSimCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFormateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
